#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define MAX_RESOURCES 5
#define MAX_THREADS 10

int available[MAX_RESOURCES];
int maximum[MAX_THREADS][MAX_RESOURCES];
int allocation[MAX_THREADS][MAX_RESOURCES];
int need[MAX_THREADS][MAX_RESOURCES];
int num_resources;
int num_threads;
int i=0,j=0;

pthread_mutex_t mutex;

void print_state() {
    printf("Available resources: ");
    for ( i = 0; i < num_resources; i++) {
        printf("%d ", available[i]);
    }
    printf("\n");
    printf("Allocation matrix:\n");
    for ( i = 0; i < num_threads; i++) {
        for (j = 0; j < num_resources; j++) {
            printf("%d ", allocation[i][j]);
        }
        printf("\n");
    }
    printf("Need matrix:\n");
    for (i = 0; i < num_threads; i++) {
        for (j = 0; j < num_resources; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
}

int is_safe_state(int thread_id, int request[]) {
    // Check if request is valid
    for ( i = 0; i < num_resources; i++) {
        if (request[i] > need[thread_id][i] || request[i] > available[i]) {
            return 0;
        }
    }
    // Try to simulate allocation of resources
    int work[num_resources];
    for (i = 0; i < num_resources; i++) {
        work[i] = available[i] - request[i];
    }
    int finish[num_threads];
    for (i = 0; i < num_threads; i++) {
        finish[i] = 0;
    }
    for (i = 0; i < num_threads; i++) {
        if (i == thread_id) {
            for (j = 0; j < num_resources; j++) {
                allocation[i][j] += request[j];
                need[i][j] -= request[j];
                work[j] -= request[j];
            }
            finish[i] = 1;
        }
    }
    int num_finished = 0;
    while (num_finished < num_threads) {
        int found = 0;
        for (i = 0; i < num_threads; i++) {
            if (!finish[i]) {
                int can_finish = 1;
                for (j = 0; j < num_resources; j++) {
                    if (need[i][j] > work[j]) {
                        can_finish = 0;
                        break;
                    }
                }
                if (can_finish) {
                    finish[i] = 1;
                    for (j = 0; j < num_resources; j++) {
                        work[j] += allocation[i][j];
                    }
                    found = 1;
                    num_finished++;
                }
            }
        }
        if (!found) {
		            for ( i = 0; i < num_threads; i++) {
                if (!finish[i]) {
                    for (j = 0; j < num_resources; j++) {
                        allocation[i][j] -= request[j];
                        need[i][j] += request[j];
                    }
                }
            }
            return 0;
        }
    }
    return 1;
}

void release_resources(int thread_id, int release[]) {
    pthread_mutex_lock(&mutex);
    for ( i = 0; i < num_resources; i++) {
        available[i] += release[i];
        allocation[thread_id][i] -= release[i];
        need[thread_id][i] += release[i];
    }
    printf("Thread %d released resources\n", thread_id);
    print_state();
    pthread_mutex_unlock(&mutex);
}

void request_resources(int thread_id, int request[]) {
    pthread_mutex_lock(&mutex);
    if (is_safe_state(thread_id, request)) {
        for ( i = 0; i < num_resources; i++) {
            available[i] -= request[i];
            allocation[thread_id][i] += request[i];
            need[thread_id][i] -= request[i];
        }
        printf("Thread %d received resources\n", thread_id);
        print_state();
    } else {
        printf("Thread %d was denied resources\n", thread_id);
    }
    pthread_mutex_unlock(&mutex);
}

void *thread_func(void *arg) {
    int thread_id = *(int *)arg;
    int request[num_resources];
    int release[num_resources];
    for (i = 0; i < num_resources; i++) {
        request[i] = rand() % (maximum[thread_id][i] + 1);
        release[i] = rand() % (allocation[thread_id][i] + 1);
    }
    printf("Thread %d requesting resources\n", thread_id);
    print_state();
    request_resources(thread_id, request);
    
    release_resources(thread_id, release);
    return NULL;
}

int main() {
    // Initialize data structures
    printf("Enter the number of resource types: ");
    scanf("%d", &num_resources);
    printf("Enter the maximum number of resources of each type: ");
    for ( i = 0; i < num_resources; i++) {
        scanf("%d", &available[i]);
    }
    printf("Enter the number of threads: ");
    scanf("%d", &num_threads);
    printf("Enter the maximum resource allocation for each thread: ");
    for (i = 0; i < num_threads; i++) {
        for ( j = 0; j < num_resources; j++) {
            scanf("%d", &maximum[i][j]);
            allocation[i][j] = 0;
            need[i][j] = maximum[i][j];
        }
    }
    // Create threads
    pthread_t threads[num_threads];
    int thread_ids[num_threads];
    pthread_mutex_init(&mutex, NULL);
    for ( i = 0; i < num_threads; i++) {
        thread_ids[i] = i;
        pthread_create(&threads[i], NULL, thread_func, &thread_ids[i]);
    }
    // Wait for threads to finish
    for (i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }
    return 0;
}
